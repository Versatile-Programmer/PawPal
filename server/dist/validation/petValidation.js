import { z } from "zod";
import { PetGender, PetSize } from "@prisma/client"; // Import enums generated by Prisma
// Schema for validating data coming IN THE BODY of the multipart request
export const createPetSchema = z.object({
    name: z.string().min(1, { message: "Pet name is required" }).max(100),
    species: z.string().min(1, { message: "Species is required" }).max(50),
    breed: z.string().max(100).optional().nullable(),
    // Expect age as a number after parsing in the controller
    age: z
        .number({ invalid_type_error: "Age must be a number" })
        .int({ message: "Age must be a whole number" })
        .positive({ message: "Age must be positive" })
        .optional()
        .nullable(),
    gender: z.nativeEnum(PetGender, {
        errorMap: () => ({ message: "Invalid gender value" }),
    }),
    size: z
        .nativeEnum(PetSize, {
        errorMap: () => ({ message: "Invalid size value" }),
    })
        .optional()
        .nullable(),
    color: z.string().max(100).optional().nullable(),
    description: z.string().optional().nullable(),
    isVaccinated: z.boolean().optional(),
    isPottyTrained: z.boolean().optional(),
});
// Schema for data needed when CREATING a request
export const createAdoptionRequestSchema = z.object({
    petId: z.number().int().positive({ message: "Valid Pet ID is required" }), // Assuming frontend sends number after parsing param
    messageToLister: z.string().max(1000).optional().nullable(), // Optional message, limit length
});
