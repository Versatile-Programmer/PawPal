name: PawPal

services:
  postgres:
    image: postgres:16
    container_name: pawpaldb
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data 
    environment:
     - POSTGRES_USER: ${POSTGRES_USER}
     - POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
     - POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # --- Redis Service for BullMQ ---
  # This creates a container running Redis. You don't need to install it locally.
  redis:
    image: redis/redis-stack:latest
    container_name: pawpal_redis_queue
    restart: unless-stopped
    volumes:
      - redis_data:/data # This volume PERSISTS your Redis queue data (optional but good practice).

  # --- Backend API Service ---
  backend:
    container_name: pawpal_backend_api
    build:
      context: ./server # Tells Docker to look for the Dockerfile in the 'server' directory
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}" # Connects your local machine's port 3001 to the container's port 3001
    depends_on:
      postgres:
        condition: service_healthy # Ensures the database starts before the backend
      redis:
        condition: service_started    # Ensures Redis starts before the backend
    volumes:
      # THIS IS THE KEY PART FOR PHOTOS:
      - ./server/public/uploads:/app/public/uploads # Links local 'uploads' folder to container's 'uploads' folder
    env_file:
      - .env # Loads your .env variables into the container
    environment:
      # Overrides variables to use Docker's internal networking
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?schema=public"
      REDIS_URL: "redis://redis:6379"

  # --- Frontend Service ---
  frontend:
    container_name: pawpal_frontend_ui
    build:
      context: ./Client # Builds your frontend image
    restart: unless-stopped
    ports:
      - "5173:80" # Connects local port 5173 to Nginx's port 80 in the container
    environment:
      API_BASE_URL: http://backend:${BACKEND_PORT}"
    depends_on:
      - backend
# --- Named Volumes for Data Persistence ---
volumes:
  postgres_data:
  redis_data: